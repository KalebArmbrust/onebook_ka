{"version":3,"sources":["redux/actionTypes.jsx","redux/actions.jsx","components/AddEmployee.jsx","components/Employee.jsx","constants.js","redux/selectors.jsx","components/EmployeeList.jsx","components/Filters.jsx","App.js","redux/reducers/filter.jsx","redux/reducers/employees.jsx","redux/reducers/index.jsx","redux/store.jsx","index.js"],"names":["ADD_EMPLOYEE","TOGGLE_EMPLOYEE","SET_FILTER","nextEmployeeId","AddEmployee","props","updateInput","input","setState","handleAddEmployee","addEmployee","state","onChange","e","target","value","this","className","onClick","React","Component","connect","content","type","payload","id","toggleEmployee","employee","completed","cx","VISIBILITY_FILTERS","ALL","INCOMPLETE","COMPLETED","getEmployeesState","store","employees","getEmployees","allIds","getEmployeeList","map","byIds","getEmployeeById","visibilityFilter","allEmployees","filter","getEmployeesByVisibilityFilter","length","index","activeFilter","setFilter","Object","keys","filterKey","currentFilter","App","Filters","initialState","action","combineReducers","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27428ccb.chunk.js","sourcesContent":["export const ADD_EMPLOYEE = \"ADD_Employee\";\nexport const TOGGLE_EMPLOYEE = \"TOGGLE_Employee\";\nexport const SET_FILTER = \"SET_FILTER\";\n","import { ADD_EMPLOYEE, TOGGLE_EMPLOYEE, SET_FILTER } from \"./actionTypes\";\n\nlet nextEmployeeId = 0;\n\nexport const addEmployee = content => ({\n  type: ADD_EMPLOYEE,\n  payload: {\n    id: ++nextEmployeeId,\n    content\n  }\n});\n\nexport const toggleEmployee = id => ({\n  type: TOGGLE_EMPLOYEE,\n  payload: { id }\n});\n\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addEmployee } from \"../redux/actions\";\n\nclass AddEmployee extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { input: \"\" };\n  }\n\n  updateInput = input => {\n    this.setState({ input });\n  };\n\n  handleAddEmployee = () => {\n    this.props.addEmployee(this.state.input);\n    this.setState({ input: \"\" });\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={e => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-employee\" onClick={this.handleAddEmployee}>\n          Add Employee\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { addEmployee }\n)(AddEmployee);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport cx from \"classnames\";\nimport { toggleEmployee } from \"../redux/actions\";\n\nconst Employee = ({ employee, toggleEmployee }) => (\n  <li className=\"employee-item\" onClick={() => toggleEmployee(employee.id)}>\n    {employee && employee.completed}{\" \"}\n    <span\n      className={cx(\n        \"employee-item__text\",\n        employee && employee.completed && \"employee-item__text--completed\"\n      )}\n    >\n      {employee.content}\n    </span>\n  </li>\n);\n\nexport default connect(\n  null,\n  { toggleEmployee }\n)(Employee);","export const VISIBILITY_FILTERS = {\n    ALL: \"All\",\n    INCOMPLETE: \"Active\",\n    COMPLETED: \"Inactive\"\n  };","import { VISIBILITY_FILTERS } from \"../constants\";\n\nexport const getEmployeesState = store => store.employees;\n\nexport const getEmployeeList = store =>\n  getEmployeesState(store) ? getEmployeesState(store).allIds : [];\n\nexport const getEmployeeById = (store, id) =>\n  getEmployeesState(store) ? { ...getEmployeesState(store).byIds[id], id } : {};\n\nexport const getEmployees = store =>\n  getEmployeeList(store).map(id => getEmployeeById(store, id));\n\nexport const getEmployeesByVisibilityFilter = (store, visibilityFilter) => {\n  const allEmployees = getEmployees(store);\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allEmployees.filter(employee => employee.completed);\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allEmployees.filter(employee => !employee.completed);\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allEmployees;\n  }\n};","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Employee from \"./Employee\";\nimport { getEmployeesByVisibilityFilter } from \"../redux/selectors\";\nimport { VISIBILITY_FILTERS } from \"../constants\";\n\nconst EmployeeList = ({ employees }) => (\n  <ul className=\"employee-list\">\n    {employees && employees.length\n      ? employees.map((employee, index) => {\n          return <Employee key={`employee-${employee.id}`} employee={employee} />;\n        })\n      : \"No Employees\"}\n  </ul>\n);\n\nconst mapStateToProps = state => {\n  const { visibilityFilter } = state;\n  const employees = getEmployeesByVisibilityFilter(state, visibilityFilter);\n  return { employees };\n};\nexport default connect(mapStateToProps)(EmployeeList);","import React from \"react\";\nimport cx from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\nimport { VISIBILITY_FILTERS } from \"../constants\";\n\nconst VisibilityFilters = ({ activeFilter, setFilter }) => {\n  return (\n    <div className=\"visibility-filters\">\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\n        return (\n          <span\n            key={`visibility-filter-${currentFilter}`}\n            className={cx(\n              \"filter\",\n              currentFilter === activeFilter && \"filter--active\"\n            )}\n            onClick={() => {\n              setFilter(currentFilter);\n            }}\n          >\n            {currentFilter}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);","import React from \"react\";\r\nimport AddEmployee from \"./components/AddEmployee\";\r\nimport EmployeeList from \"./components/EmployeeList\";\r\nimport Filters from \"./components/Filters\";\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Employees</h1>\r\n      <AddEmployee />\r\n      <EmployeeList />\r\n      <Filters />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { SET_FILTER } from \"../actionTypes\";\nimport { VISIBILITY_FILTERS } from \"../../constants\";\n\nconst initialState = VISIBILITY_FILTERS.ALL;\n\nconst visibilityFilter = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_FILTER: {\n      return action.payload.filter;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default visibilityFilter;","import { ADD_EMPLOYEE, TOGGLE_EMPLOYEE } from \"../actionTypes\";\n\nconst initialState = {\n  allIds: [],\n  byIds: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_EMPLOYEE: {\n      const { id, content } = action.payload;\n      return {\n        ...state,\n        allIds: [...state.allIds, id],\n        byIds: {\n          ...state.byIds,\n          [id]: {\n            content,\n            completed: false\n          }\n        }\n      };\n    }\n    case TOGGLE_EMPLOYEE: {\n      const { id } = action.payload;\n      return {\n        ...state,\n        byIds: {\n          ...state.byIds,\n          [id]: {\n            ...state.byIds[id],\n            completed: !state.byIds[id].completed\n          }\n        }\n      };\n    }\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport visibilityFilter from \"./filter\";\nimport employees from \"./employees\";\n\nexport default combineReducers({ employees, visibilityFilter });","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}